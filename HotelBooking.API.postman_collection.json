{
	"info": {
		"_postman_id": "33c8ee94-c5ac-4e39-a50f-b950e27cc40c",
		"name": "Hotel-RoomBooking.API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36748154"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Tanmoy Chakraborty\",\r\n  \"email\": \"tanmoychakraborty0041383@gmail.com\",\r\n  \"phone_num\": \"6295741353\",\r\n  \"hash_password\": \"123456\",\r\n  \"role\": \"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"text/html\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema validation\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseData).to.be.a('string').that.is.empty; // Expecting an empty string response\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"tanmoychakraborty0041383@gmail.com\",\r\n    \"hash_password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "verifyOtp",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"tanmoychakraborty0041383@gmail.com\",\r\n    \"otp\": \"289157\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/verify-otp",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"verify-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "resendOtp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has an error array with required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.error.forEach(err => {\r",
									"        pm.expect(err).to.have.all.keys('code', 'expected', 'received', 'path', 'message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.be.an('array').that.is.not.empty;\r",
									"    responseData.error.forEach(function(err) {\r",
									"        pm.expect(err.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error code should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.error.forEach(function(err) {\r",
									"        pm.expect(err.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Conten-Type",
								"value": "application/json;",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"tanmoychakraborty0041383@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:5000/auth/resendOtp",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"resendOtp"
							]
						}
					},
					"response": []
				},
				{
					"name": "forgetPassword",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"tanmoychakraborty0041383@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/forgot-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "resetPassword",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"tanmoychakraborty0041383@gmail.com\",\r\n    \"otp\": \"868109\",\r\n    \"new_password\": \"456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/reset-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "googleAuth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/auth/google?role=customer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"google"
							],
							"query": [
								{
									"key": "role",
									"value": "customer"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "updateUser",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "deleteUser",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "me",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODRlZGUzNTU4YmRmMTU5MGJhMjNiOWUiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDk5OTkxNjAsImV4cCI6MTc1MDAwMjc2MH0.eawZnqEGHIyhhGmr5tDASUIeEghixlz_VHJLlkrQwnE",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/684ede3558bdf1590ba23b9e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"684ede3558bdf1590ba23b9e"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "hotels",
					"item": [
						{
							"name": "rooms",
							"item": [
								{
									"name": "addRooms",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "deleteRooms",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "updateRooms",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							]
						},
						{
							"name": "addHotels",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "deleteHotels",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "updateHotels",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "booking",
			"item": []
		},
		{
			"name": "payment",
			"item": []
		}
	]
}